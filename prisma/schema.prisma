// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum BetState {
    OPEN
    CLOSE
}

enum UserBetState {
    WON
    LOST
}

enum UserBetValue {
    CHICKEN_1
    CHICKEN_2
}

enum UserBetTicketState {
    PENDING
    PAYED
    FAILED
}

model Users {
    id Int @id @default(autoincrement())
    paymentClientId String? @unique @map("payment_client_id")
    name String
    email String @unique
    image String
    createdAt DateTime @default(now()) @map("created_at")

    myBets  UserBets[]
    myTickets UserBetTickets[]

    @@map("users")
}

model Bets {
    id Int @id @default(autoincrement())
    createdAt   DateTime  @default(now()) @map("created_at")
    finishAt    DateTime? @map("finish_at")
    state       BetState?  @default(CLOSE)
    bettors     UserBets[]

    @@map("bets")
}

model UserBetTickets {
    id Int @id @default(autoincrement())
    userId  Int     @map("user_id")
    paymentId String
    state   UserBetTicketState @default(PENDING)
    createdAt DateTime @default(now()) @map("created_at")

    bet UserBets?
    user Users @relation(fields: [userId], references: [id])

    @@map("user_bet_tickets")
}

model UserBets {
    id Int @id @default(autoincrement())
    userId    Int @map("user_id")
    betId     Int @map("bet_id")
    betTicketId Int @map("bet_ticket_id") @unique
    value     UserBetValue
    state     UserBetState
    createdAt DateTime @default(now()) @map("created_at")
    isWithdrawn Boolean @default(false)

    bet Bets @relation(fields: [betId], references: [id])
    user Users @relation(fields: [userId], references: [id])
    ticket UserBetTickets @relation(fields: [betTicketId], references: [id])

    @@map("user_bets")
}
